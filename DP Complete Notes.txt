Design Patterns are no way related to Project Designing or System Designing.

They are purely related to Project Implementation.

Design Pattern is a set of rules which are best solutions for reoccuring problems
in app development.

They are proven soln/best practice to develop software more effectively.

Solution designed for a reoccuring problem is design pattern.

Every Design pattern has 3 Parts

1.Problem
2.Solution
3.Context[Situation]

The Best solution among numerous soln for a re-occuring problem in app development
is design pattern.

Anti Pattern : Worst solution for a reoccuring problem in app development is Anti Pattern.

Design Patterns can be provided by anyone.

1990 --> Richard Helm,Erich Gamma,Ralph Johnson and John Vilssides provided 100+ Design patterns for reoccuring problems in software development.

Later they settled to 23 Patterns which are known as GOF/GO4 Patterns.

GOF Patterns can be implemented in any OOP Language.

Design Patterns Speaks about
	1.Memory Management
	2.Loose Coupling among Objects
	3.Better Performance Management

Design Patterns are used in Large Scale Enterprise Development

GOF Patterns are quite useful in Standalone Apps

2000s --> Sun MS has given a set of patterns like JEE Patterns for JEE Technologies based Layered App Development.

JEE Patterns can be implemented in Java Language only

2010 --> Microservices Architecture was replaced by Monolithic Architecture which was used to develop large scale Projects.
		
	In Microservices Architecture,Each Service will be developed as an independent project and such related services will be operated to gather to complete app development.

Monolithic Architecture was the Traditional Architecture where u need to develop
all services of an app in a single project.

JEE Patterns solved the problems which occur in Project developed using Monolithic Architecture.

Microservices Patterns are provided to solve problems in Project developed using Microservices Architecture.

Since Project developed using Microservices Design Patterns are Layered Apps,
hence we use JEE patterns as well as Microservices Design Patterns.

Final Conclusion

Standalone App Development <-- GOF/GO4 Design Patterns

Monolithic Architecture App Development <-- GOF+JEE Patterns

Microservice Architecture App Development <-- JEE+Microservices Patterns

FAQ :What is the Difference between Architecture and Design Patterns?

--> Architecture speaks about end to end plan to develop an app by involving
multiple layers.

--> Design Patterns speaks about solution which is used to solve re-occuring
problems while writing logics in a particular layer of an architecture.

	Example : MVC is a layered architecture to develop java web apps having certain execution flows.

			 While Writing logics for each layer we take the support of Design Patterns.

Important Terminologies while Documenting and Releasing Design Patterns

	1.Candidate Pattern [Part of Pattern Identification] :

		A Solution becomes a Candidate Pattern when it is considered as a best solution
		for a reoccuring problem.
	
	2.Pattern Template/Pattern Characteristics [Part of Detailing the Design pattern] :

	   Providing Details about a Candidate Pattern is Pattern Template.The Following
	   details are provided in Pattern Template

			1.Pattern Name
			2.Problem
			3.Forces
			4.Solution
				1.Structure
				2.Strategies
			5.Consequences
			6.Related Patterns
	
	3.Pattern Catalog [Part of Pattern Categorization/Classification] :
		
		The Design Pattern will be verified by using Other Design Pattern Catalogs in the market to make sure that your design Pattern is unique.

	Popular Pattern Catalogs : 1.GOF Pattern Catalog,2.JEE Pattern Catalog

	When an Individual/Enterprise provides Numerous Design Patterns for Numerous
	Problems then it is better to categorize them by creating Pattern Catalog

	Doing This makes developers to take specific Design Pattern easily

	
	GOF Pattern Catalog Contains 3 Categories

		1.Creational Pattern[Object Creation]
		2.Structural Pattern[Composing Large Object using short object]
		3.Behavioral Pattern[Interaction between Class and Object]

	JEE Pattern Catalog contains 3 Categories

		1.Presentation Tier Patterns
		2.Business Tier Patterns
		3.Integration Tier Patterns

Note : A Candidate Pattern becomes a Design Pattern when a Pattern Template is provided.

FAQ : What If I place multiple Logics in a Single Java Class?

Ans:

	1.There will be no clear cut seperation btwn one logic and another.

	2.Modifiying Code in One Logic affects another logic.

	3.Maintenance[Bug Fixing] and Enhancement[Adding New Features] becomes very complex.

	4.Parallel Development isn't possible,hence productivity becomes poor.

	5.It isn't an Industry Standard Approach. 

Note : There are Different Types of Logics

	1.Presentation Logics[UI Logics]

	2.Business Logic[Calculations,sorting]

	3.Persistence Logics [CURD/SCUD/CRUD Operations]

	4.Advices Logics [Security,Logging,TX Management]

	etc....

To Overcome the Limitations of Multiple Logics in Single Class,we need to take
support of Layered Apps[Placing Each Logic in each Layer/Class and connecting them]

FAQ : What If I place multiple Logics in a Multiple Java Class?

Ans:

	1.There will be a clear cut seperation btwn one logic and another.

	2.Modifiying Logic in a Layer doesn't affect the logic in another layer.

	3.Maintenance[Bug Fixing] and Enhancement[Adding New Features] becomes easy.

	4.Parallel Development is possible,hence productivity becomes good.

	5.It is an Industry Standard Approach.

Java Based Layered Applications have the Following Layer/Tier

	1.Client Tier[Interacts with end user]

	2.Presentation Tier[For Presentation]

	3.Business Tier[Business Requirements implemented]

	4.Integration Tier[Communicates with External Resources like DB,etc..]

	5.Resource Tier[Database]
	
Tier : Logical Partition of App having certain types of logics

Note : Client Tier and Resource Tier represents Non-Programmable [or] Ready Made Apps [or] External Apps.

Programmers concentrate on the Other Three Tiers.

Hence JEE Pattern Catalog has Design Patterns for these Tier Categorizations.

Microservices Patterns
----------------------

Since Microservices is recently launched Architecture,hence there is No Standard Pattern Catalog yet released.The Popular
Design Patterns are

	1.API Gateway
	
	2.SAGA Pattern

	3.Circuit Breaker

	4.Asynchronus Messaging

	5.Chain of Responsibility Pattern

	etc...

(Session - 004)

Singleton Class Pattern
-----------------------

	--> This Design Pattern comes under Creational Pattern Catalog

	Problem : Creating Multiple Objects for Java Class in the following
	Situations leads to memory wastage and CPU time wastage.

		1.If class is not having member variables
	
		2.If class is having read only state[final variables]

		3.If class is having shareable state[cache/buffer]

	Solution : Develop java class as Singleton Class which allows us
	to create only one object for the in any situation [i.e when class
	doesn't have member variables,has final variables and it is in
	shareable state]

	Note : In Java , Object Creation is a Costly Process in terms
	of memory and CPU Utilization.Hence it is recommended to
	minimize or avoid object creation as long as u can.

	Pre-Defined Singleton Classes

		1.Runtime Class [java.lang package] : One Application can have onlu 1 Runtime

 		2.Desktop Class [java.awt package] : One Computer can contain 1 Desktop 

		3.Logger Class [org.apache.log4j package] : One Logger Class takes care of Entire Logging Activities

	Note : If One Object is only created for a java class when multiple objects can be created,then
	that particular Class is not a Singleton Java Class.

		Example : Servlet Component Class creates Only one Object where as
		it is capable of creating multiple Objects.

	Note : A Class is said to be a Singleton Java Class when we attempt to create multiple
	multiple objects for a class but object reference of 1st object is passed to
	other objects.

	Singleton Java Class with Minimum Standards
	-------------------------------------------

	1.Place 0-param Constructor [also Parameterized Constructors] as private
	Constructor,hence Object can't be created using new operator.

	2.Create a private static variable with Class as type.This variable
	holds a single reference of instance [object] of a class.

		Using This Variable we can check whether Object has been created
		or not.

	Note : If Variable holds null --> Object has not yet been created

	       If Variable holds reference value --> Object has been created

	3.Place the Singleton logic in a static Factory Method

	Note : Singleton Logic --> The logic to create the object by checking
				   the value of above variable.

	       Factory Method --> The Method to create a Object

	Example:

package com.sysveda.Singleton.MinimumStandards;

public class Program1 {
	private static Program1 INSTANCE;
	private Program1() {
		System.out.println("0-Param Constructor");
	}
	public static Program1 getInstance() {
		if(INSTANCE==null) {
			INSTANCE = new Program1();
		}
		return INSTANCE;
	}
	public static void main(String[] args) {
		
		Program1 obj1 = Program1.getInstance();
		Program1 obj2 = Program1.getInstance();
		Program1 obj3 = Program1.getInstance();
		
		System.out.println(obj1);
		System.out.println(obj2);
		System.out.println(obj3);
	}
}

(Session - 005)

Refer Notes for Singleton Class Example

FAQ : We shouldn't go by constructor execution every time to confirm whether
object is created or not.Why?

Ans:
	Reason-1 : If you create object for a child class whose parent class
	is an abstract class,abstract class constructor and child class
	constructor gets executed in the sametime.It doesn't mean that
	object has been created for Abstract Class.

	Note : Object can't be created for Interface and Abstract Class

	Reason-2 : Constructor won't be executed when Object is created
	via Cloning and De-serialization process.It doesn't mean that
	object is not created.

FAQ : If Multiple Threads calls Factory Method at a same time then is there
      any possibility that Multiple Object gets Created for a Singleton
      Java Class?

Ans : Yes.It's going to be a serious issue when Singleton Class acts as a
      helper Class for Servlet or JSP Components of Web Application which is 
      a multi-threaded environment where multiple threads will be created
      for multiple requests on Single Object of Singleton Class
      [Servlet Component].

	Eg : Refer Notes for Example and Diagram
